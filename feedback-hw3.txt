;; _total-score				92 / 100

;; Week 3 Assignment

;; === automated correctness===

;; === warmup ===


;; remove_max				7.0 / 7
[3, 2, 4, 9, 6] => [3, 2, 4, 6], CORRECT
+ 2 / 2
[3, 2, 4, 9, 6, 1, 1, 12] => [3, 2, 4, 9, 6, 1, 1], CORRECT
+ 2 / 2
[15, 3, 2, 4, 9, 6, 1, 1, 12] => [3, 2, 4, 9, 6, 1, 1, 12], CORRECT
+ 2 / 2
[3, 2, 9, 4, 9, 6, 1, 1] => [3, 2, 4, 6, 1, 1], CORRECT
+ 1 / 1

;; remove_max_in_out				5.0 / 5
[1, 12, 3, 4]=> length 3, CORRECT
+ 3 / 3
[1, 3, 12, 3, 12, 4, 5]=> length 5, CORRECT
+ 2 / 2

;; area_and_perimeter				5.0 / 5
(height: 10.0, length: 18.3)
=> Area: 183, CORRECT
+ 3 / 3
=> Perimeter: 56.6, CORRECT
+ 2 / 2

;; === tic-tac-toe ===

;; init_board				4.0 / 4
CORRECT
+ 4.0 / 4.0

;; place_piece				5.0 / 5

Test board: 
X X * 
O * * 
O * X 

Placing 'X' at (1, 2): CORRECT
+ 2.0 / 2.0
Placing 'O' at (1, 0): CORRECT
+ 2.0 / 2.0
Placing 'X' at (3,3) (out of bounds): Return value = 0, CORRECT
+ 1.0 / 1.0

;; player_won				7.0 / 7

Test board: 
X O * 
O O O 
O * X 

Player 'O' won at (1, 2) = 1, CORRECT
+ 3.0 / 3.0

Test board: 
X O * 
O X O 
O * X 

Player 'X' won at (1, 1) = 1, CORRECT
+ 2.0 / 2.0

Test board: 
X O * 
O * O 
O O X 

Player 'O' won at (2, 1) = 0, CORRECT
+ 2.0 / 2.0


;; play_tic_tac_toe				10.0 / 10

Inputs (0,0) (1,0) (0, 2) (2, 2) (1,1), (0, 1): CORRECT
+ 3.0 / 3
Inputs (2,2) (0,0) (1, 2) (0, 1) (2,1), (1, 0): CORRECT
+ 3.0 / 3
Inputs (2,2) (0,0) (1, 2) (0, 1) (0, 2): CORRECT
+ 2.0 / 2
Inputs (2,2) (0,0) (1, 2) (1, 0) (2, 0) (2, 1) (1, 1) (0, 2) (0, 1): CORRECT
+ 2.0 / 2

;; computer_move				3.0 / 3

Test board: 
X O * 
* * O 
X * * 

Player 'X' Computer move: (1, 1), CORRECT
+ 2.0 / 2.0

Test board: 
X O X 
O * O 
X O X 

Player 'X' Computer move: (1, 1), CORRECT
+ 1.0 / 1.0


;; === othello ===


;; init_board				4.0 / 4
CORRECT
+ 4.0 / 4.0

;; place_piece				7.0 / 7


Test board: 
* * * * * * * * 
* * * * * * * * 
* * B B B W * * 
* * W W W W * * 
* * B W B B * * 
* * * W * * * * 
* * * * * * * * 
* * * * * * * * 

Placing 'B' at (6, 3): CORRECT
+ 2.0 / 2.0
Placing 'B' at (2, 6): CORRECT
+ 2.0 / 2.0
Placing 'B' at (3,3): Return value = 0, CORRECT
+ 1.0 / 1.0
Placing 'B' at (6,5): Return value = 0, CORRECT
+ 1.0 / 1.0
Placing 'B' at (5,2): Return value = 0, CORRECT
+ 1.0 / 1.0

;; flip_pieces				10.0 / 10

Test board:
* B * * * * * * 
* W * * * * * * 
* W * * * * * * 
* B * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
Placed (0, 1): Return value = 2, CORRECT
+ 2.0 / 2.0
Placed (3, 1): Return value = 2, CORRECT
+ 2.0 / 2.0

Test board:
* * * * * * * * 
B W W W B * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
Placed (1, 0): Return value = 3, CORRECT
+ 1.0 / 1.0
Placed (1, 4): Return value = 3, CORRECT
+ 1.0 / 1.0

Test board:
W * * * * * * * 
* B * * * * * * 
* * W * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
Placed (0, 0): Return value = 1, CORRECT
+ 1.0 / 1.0
Placed (2, 2): Return value = 1, CORRECT
+ 1.0 / 1.0

Test board:
* * * * * * * * 
* * * W * * * * 
* * B * * * * * 
* B * * * * * * 
W * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
Placed (1, 3): Return value = 2, CORRECT
+ 1.0 / 1.0
Placed (4, 0): Return value = 2, CORRECT
+ 1.0 / 1.0

;; player_won				0.0 / 5


Test board: 
W B B B B B B B 
B B B B B B B B 
B B B B B B B B 
B B B B B B B B 
B B W B B W B B 
B B B B B B B B 
B B B W B B B B 
B B B B B B B W 

Winner = *, INCORRECT, Correct result = B
+ 0.0 / 3.0


Test board: 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W * * W W 
W W W * * B * W 

Winner = B, INCORRECT, Correct result = W
+ 0.0 / 2.0


;; computer_move				2.0 / 5


Test board: 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * W B * * * 
* * * B W * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 

Player 'B' Computer move: (0, 0), INCORRECT
+ 0.0 / 1.0


Test board: 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W * * W W 
W W W * W B * W 

Player 'B' Computer move: (0, 0), INCORRECT, Correct answer: (7, 3)
+ 0.0 / 1.0


Test board: 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * B * 
* * * * * W B * 
* * * * * * B * 

Player 'B' Computer move: (0, 0), INCORRECT
+ 0.0 / 1.0


Test board: 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W W W W W 
W W W W * * W W 
W W W * * B * W 

Player 'W' Computer move: Return value = 0, CORRECT
+ 1.0 / 1.0


Test board: 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 
* * * * W * * * 
* * * * * * * * 
* * * * * * * * 
* * * * * * * * 

Player 'B' Computer move: Return value = 0, CORRECT
+ 1.0 / 1.0


;; automated_correctness_subtotal_:				69.0 / 77

;; === 
;; partial credit returned via visual inspection - only for
;; problems on which you earned fewer points than you can get back.
;; if you got more than 0 points, then the partial credit is scaled.
;; look at code for grader notes if bugs identified

;; Use your judgement here - if something comes up that you think should
;; merit partial credit, post on Piazza and we'll all do it.

;; if necessary, 10 pt charge for grader manually
;; getting code to run (as long as it was student error)

;; only for items incorrect in automated grading
;; manual_correctness_subtotal_:	     / 

;; combined_correctness_subtotal_:	     / 77

;; === style ===

;; well-written purposes             5 / 5
;; proper indentation, line breaks   5 / 5
;; well-named variables		     5 / 5
(i, j, k okay for simple loop counters. Meaningful names for others.)
;; adequate tests (only for warmup)  4 / 4

;; === efficiency ===
;; good decisions for control structures  4 / 4
 -2 - inappropriate control structure (if/else where switch should have been)
 -2 - repeated function calls with same input and same result


;; style _subtotal_:		   23 / 23

;; graded by goldsteinrose

